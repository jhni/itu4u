<?php

// $Id: 

// Helper functions for userpoints_node_action.module

define("USERPOINTS_NODE_ACTION_PUBLISH", 1);
define("USERPOINTS_NODE_ACTION_STICKY", 2);
define("USERPOINTS_NODE_ACTION_PROMOTE", 3);

define("USERPOINTS_MESSAGE_START", "%U1%");
define("USERPOINTS_MESSAGE_MIDDLE", "%U2%");
define("USERPOINTS_MESSAGE_END", "%U3%");

/**
 * Admin form for new rules
 */
function userpoints_node_action_admin_add_form() {
  // Get list of node types and roles
  $roles = user_roles(true);
  $pubtypes = node_get_types('names');
  $actions = _userpoints_node_action_get_actions();
  $categories = userpoints_get_categories();
  
  // Build the form
  $form['add'] = array(
    '#id' => 'userpoints_node_action_admin_add_form',
    '#redirect' => 'admin/settings/userpoints_node_action',
    '#type' => 'fieldset'
  );
  $form['add']['title'] = array (
    '#value' => '<h2>'.t('Add Node Action Rule').'</h2>',
  );
  $form['add']['role'] = array (
    '#type' => 'select',
    '#required' => true,
    '#title' => t('Role'),
    '#options' => $roles
  );
  $form['add']['pubtype'] = array (
    '#type' => 'select',
    '#required' => true,
    '#title' => t('Publication type'),
    '#options' => $pubtypes
  );
  $form['add']['action'] = array(
    '#type' => 'select',
    '#required' => 'true',
    '#title' => t('Action'),
    '#options' => $actions
  );
  $form['add']['category'] = array(
    '#type' => 'select',
    '#required' => 'true',
    '#title' => t('Category'),
    '#options' => $categories
  );
  $form['add']['points'] = array (
    '#type' => 'textfield',
    '#required' => true,
    '#title' => t('!Points', userpoints_translation()),
    '#description' => t('Number of !points it costs to perform the selected action on the selected node for the selected user role.', userpoints_translation()),
    '#maxlength' => 8,
    '#size' => 8,
    '#element_validate' => array('userpoints_node_action_validate_points'),
  );
  $form['add']['submit'] = array (
    '#type' => 'submit',
    '#value' => t('Add')
  );
  $form['#validate'][] = 'userpoints_node_action_admin_add_form_validate';
  return $form;
}

/**
 * Admin form for the custom message
 */
function userpoints_node_action_admin_message_form() {
  // Small form, ask for the message
  $roles = user_roles(true);
  $pubtypes = node_get_types('names');
  $actions = _userpoints_node_action_get_actions();
  $categories = userpoints_get_categories();
  
  // Build the form
  $form['message'] = array(
    '#id' => 'userpoints_node_action_admin_message_form',
    '#redirect' => 'admin/settings/userpoints_node_action',
    '#type' => 'fieldset'
  );
  $form['message']['title'] = array (
    '#value' => '<h2>'.t('Customize message options').'</h2>',
  );
  $form['message']['display'] = array (
    '#type' => 'checkbox',
    '#title' => t('Display default messages?'),
    '#default_value' => variable_get('userpoints_node_action_display_messages', true),
    '#description' => t("Display default \"You do not have enough !points\" messages automatically generated by the module (by default, the module will display messages). Note that if you don't display default messages and don't provide a custom message, it will probably be very confusing for the user as the node will be invalid without giving a reason.", userpoints_translation())
  );
  $form['message']['customMessage'] = array (
    '#type' => 'textarea',
    '#title' => t('Custom message'),
    '#default_value' => variable_get('userpoints_node_action_custom_message', ''),
    '#description' => t('Enter a custom message here. You may use "!points" to refer to the correct term, and may use the custom schema to include links in your message that will open in a new window: ' . USERPOINTS_MESSAGE_START . 'path' . USERPOINTS_MESSAGE_MIDDLE . 'desc' . USERPOINTS_MESSAGE_END . '. For example, the following message: "' . USERPOINTS_MESSAGE_START . '/store/item' . USERPOINTS_MESSAGE_MIDDLE . 'click here to buy more' . USERPOINTS_MESSAGE_END . '" will effectively call the l() function with the text being "click here to buy more" and being a link to the appropriate /store/item location. This message will get displayed once upon form validation, regardless of how many rules are conflicted with. If you do not wish to have a custom message, simply leave this field blank.'),
  );
  $message = userpoints_node_action_translate_message();
  if (!empty($message)) {
    $form['message']['customMessageExample'] = array (
      '#type' => 'markup',
      '#prefix' => '<div class="form-item"><label>Example of your message: </label><div>',
      '#suffix' => '</div><div class="description">' . t('This is what your custom message will look like when there is a rule conflict.') . '</div>',
      '#value' => $message,
    );
  }
  $form['message']['submit'] = array (
    '#type' => 'submit',
    '#value' => t('Save')
  );
  return $form;
}

/* This function gets the custom set message */
function userpoints_node_action_translate_message() {
  $string = variable_get('userpoints_node_action_custom_message', '');
  if (!empty($string)) {
    $matches = array();
    preg_match_all('/('.USERPOINTS_MESSAGE_START.')(.*?)('.USERPOINTS_MESSAGE_MIDDLE.')(.*?)('.USERPOINTS_MESSAGE_END.')/', $string, $matches, PREG_SET_ORDER);
    foreach ($matches as $replacer) {
      // The order of matches is the following:
      // 0: Entire match (will need this for the replacement)
      // 1: The first marker
      // 2: The link URL
      // 3: The second marker
      // 4: The link text
      // 5: The third marker
      $linker = l($replacer[4], $replacer[2]);
      $string = str_replace($replacer[0], $linker, $string);
    }
  }
  return t($string, userpoints_translation());
}

function userpoints_node_action_admin_modify_form () {
  // Get list of node types and roles, and actual rules
  $roles = user_roles(true);
  $pubtypes = node_get_types('names');
  $actions = _userpoints_node_action_get_actions();
  $categories = userpoints_get_categories();
  $rules = userpoints_node_action_get_all();
  
  // Build the form
  $form = array(
    '#id' => 'userpoints_node_action_admin_modify_form',
    '#redirect' => 'admin/settings/userpoints_node_action',
  );
  $form['modify'] = array (
    '#type' => 'fieldset',
    '#tree' => true,
  );
  $form['modify']['title'] = array (
    '#value' => '<h2>'.t('Stored rules').'</h2>',
  );
  
  // Loop for every stored rule
  $i = 0;
  if (!empty($rules)) {
    foreach ($rules as $rule) {
      $form['modify'][$i]['role'] = array(
        '#type' => 'select',
        '#required' => true,
        '#options' => $roles,
        '#default_value' => $rule['role_id'],
      );
      $form['modify'][$i]['pubtype'] = array(
        '#type' => 'select',
        '#required' => true,
        '#options' => $pubtypes,
        '#default_value' => $rule['pubtype'],
      );
      $form['modify'][$i]['action'] = array(
        '#type' => 'select',
        '#required' => true,
        '#options' => $actions,
        '#default_value' => $rule['action'],
      );
      $form['modify'][$i]['category'] = array(
        '#type' => 'select',
        '#required' => true,
        '#options' => $categories,
        '#default_value' => $rule['category'],
      );
      $form['modify'][$i]['points'] = array(
        '#type' => 'textfield',
        '#required' => true,
        '#maxlength' => 8,
        '#size' => 8,
        '#default_value' => $rule['points'],
        '#element_validate' => array('userpoints_node_action_validate_points'),
      );
      $form['modify'][$i]['id'] = array(
        '#type' => 'hidden',
        '#value' => $rule['id'],
      );
      $i++;
    }
    
    $form['modify']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Modify'),
      '#weight' => 65535,
      '#tree' => false,
    );
  } else {
    $form['modify']['none'] = array(
      '#value' => t('There are no current rules configured. Add one using the above form.')
    );
  }
  return $form;
}
/**
 * Theme function to render modify rules form in admin side
 */
function theme_userpoints_node_action_admin_modify_form($form) {
  $header = array(t('Role'), t('Publication type'), t('Action'), t('Category'), t('!Points', userpoints_translation()), '');
  $i = 0;
  $rows = array();
  while(!empty($form['modify'][$i])) {
    $row = array (
      drupal_render($form['modify'][$i]['role']),
      drupal_render($form['modify'][$i]['pubtype']),
      drupal_render($form['modify'][$i]['action']),
      drupal_render($form['modify'][$i]['category']),
      drupal_render($form['modify'][$i]['points']),
      drupal_render($form['modify'][$i]['id']) . l(t('delete'), 'admin/settings/userpoints_node_action/delete/'.$form['modify'][$i]['id']['#value']),
    );
    unset($form['modify'][$i]);
    $rows[] = $row;
    $i++;
  }
  $table = theme('table', $header, $rows);
  $form['modify']['table'] = array (
    '#value' => $table,
    '#weight' => 65535,
  );
  $output = drupal_render_form($form['#id'], $form);
  return $output;
}

/**
 * Get all rules and return as multidimensional array
 */
function userpoints_node_action_get_all() {
  $result = db_query ("SELECT * FROM {userpoints_node_action}");
  $rules = array();
  while ($rule = db_fetch_array($result)) {
    $rules[] = $rule;
  }
  return $rules;
}

/**
 * Get all node actions as array, for formatting
 */
function _userpoints_node_action_get_actions($database = false) {
  // If not for database purposes, get formal names
  if ($database == false) {
    return array(
      USERPOINTS_NODE_ACTION_PUBLISH => 'Publish',
      USERPOINTS_NODE_ACTION_STICKY => 'Sticky',
      USERPOINTS_NODE_ACTION_PROMOTE => 'Promote'
    );
  } else {
    // Otherwise, get databased names
    return array(
      USERPOINTS_NODE_ACTION_PUBLISH => 'status',
      USERPOINTS_NODE_ACTION_STICKY => 'sticky',
      USERPOINTS_NODE_ACTION_PROMOTE => 'promote'
    );
  }
}

/**
 * Returns an object that holds the cost and category. Since we're only getting one (as well as there
 * should only be one limit per person), multiple roles may cause multiple rules to be applied. If this
 * is the case, the rule that costs the most points will be applied.
 * Passing false as category will get the rules for all categories of points
 */
function _get_userpoints_node_action_user_cost($user, $nodetype, $action, $category = false) {
  $i = count($user->roles);
  $addRoles = "";
  foreach($user->roles as $key => $role) {
    $addRoles .= 'role_id = '. $key;
    $i--;
    if ($i > 0) {
      $addRoles .= ' OR ';
    }
  }
  $q = "SELECT MAX(points) as points, category FROM {userpoints_node_action} WHERE pubtype = '$nodetype' AND ($addRoles) AND action = $action";
  if ($category !== false) {
    $q .= " AND category = $category";
  }
  $q .= " GROUP BY category  ORDER BY points ASC ";
  $results = db_query($q);
  $costs = array();
  while($cost = db_fetch_object($results)) {
    $costs[] = $cost;
  }
  return $costs;
}

/**
 * Gets a status message based on if the user has enough points
 */
function _get_userpoints_node_action_status($account, $pubtype, $action, &$totalCost) {
  global $user;
  $results = array();
  $result = null;
  $actions = _userpoints_node_action_get_actions();
  $cost = _get_userpoints_node_action_user_cost($account, $pubtype, $action);
  
  if (!empty($cost)) {
    $updated = array();
    foreach($cost as $c) {
      if (empty($totalCost[$c->category])) {
        $totalCost[$c->category] = 0;
      }
      $totalCost[$c->category] += $c->points;
      $updated[$c->category] = 1;
    }
    foreach($totalCost as $cat => $amount) {
      if ($updated[$cat]) {
        $points = userpoints_get_current_points($account->uid, $cat);
        if ($points < $amount) {
          // Is it the current user or an admin editing?
          if ($user->uid == $account->uid) {
            $result = t("You do not have enough"); 
          } else {
            $result = t("This user does not have enough");
          }
          $result .= t(" !points ", userpoints_translation());
          if ($cat != 0) {
            $result .= t("of type %category ",  array('%category' => taxonomy_get_term($cat)->name));
          }
          $result .= t("to $actions[$action] this item");
          if ($points >= $amount) {
            $result .= t(" (after previous actions, but you may have enough for this action alone)");
          }
        }
        if (!empty($result)) {
          $results[] = $result;
        }
      }
    }
  }
  return $results;
}

/**
 * Makes a user pay for their actions (sounds a little ominous)
 */
function _userpoints_node_action_payment($account, $pubtype, $action) {
  global $user;
  $results = array();
  $result = null;
  $actions = _userpoints_node_action_get_actions();
  $cost = _get_userpoints_node_action_user_cost($account, $pubtype, $action);
  if (!empty($cost)) {
    foreach($cost as $c) {
      $points = userpoints_get_current_points($account->uid, $c->category);
      // They don't have enough points, even though we calculated it before...
      if ($points < $c->points) {
        $result = array('status' => false, 'reason' => t("Not enough !points ", userpoints_translation()));
        if ($c->category != 0) {
          $result['reason'] .= t("of type %category ",  array('%category' => taxonomy_get_term($c->category)->name));
        }
        $result['reason'] .= t("to $actions[$action] this item");
      } else {
        $params = array('uid' => intval($account->uid), 'points' => ($c->points * -1), 'tid' => intval($c->category), 'display' => true, 'operation' => 'node_action', 'description' => t("!Points cost for action: \"$actions[$action]\" ", userpoints_translation()));
        if ($c->category != 0) {
          $params['description'] .= t("of type %category ",  array('%category' => taxonomy_get_term($c->category)->name));
        }
        $params['description'] .= t("on a node of type: \"$pubtype\"");
        $result = userpoints_userpointsapi($params);
      }
      if (!empty($result)) {
        $results[] = $result;
      }
    }
  }
  return $results;
}

/**
 * Checks to see if the new action status has previously been set. For instance, if
 * a node was published, then simply edited without changing the publish status, the
 * user shouldn't be charged for it again
 */
function _userpoints_node_action_has_status_changed($nid, $action, $newStatus = 1) {
  // It seems the only reliable way to do this is to reload the node. It could be a direct
  // query to the node table, but node_load would be more resistant to change.
  // If the nid is empty, it's because they're making a new node
  if (empty($nid)) {
    return true;
  }
  $node = node_load($nid);
  
  // Oops? Must be a problem, return true by default;
  if (empty($action) || empty($node)) {
    return true;
  }
  // If the statuses are different
  if ($node->$action != $newStatus) {
    return true;
  } else {
    return false;
  }
}
